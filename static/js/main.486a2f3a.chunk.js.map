{"version":3,"sources":["components/Nav/Nav.js","redux/actions.js","components/Loader/Loader.js","components/CommentList/CommentList.js","components/PostPage/PostPage.js","components/EditPost/EditPost.js","components/Post/Post.js","components/PostsList/PostsList.js","components/NewPost/NewPost.js","components/Main/Main.js","App.js","redux/reducer.js","index.js"],"names":["Nav","className","activeClassName","to","exact","BASE_URL","receivePosts","posts","type","receivePost","post","receiveNewPost","receiveNewComment","updatePost","Loader","CommentList","state","commentMap","postId","body","id","handleFieldChange","event","target","name","value","props","setState","prevState","handleFormSubmit","preventDefault","postComment","comments","this","onSubmit","placeholder","onChange","length","map","comment","key","React","Component","connect","dispatch","a","fetch","method","headers","JSON","stringify","then","response","json","res","createComment","PostPage","payLoad","match","params","clearPostData","postData","date","title","getPost","EditPost","postMap","postTitle","postBody","onEdit","spellCheck","disabled","onClick","defaultProps","editPost","Post","isEditing","deleteItem","deletePost","PostsList","Math","random","NewPost","Date","toISOString","slice","numberOfPosts","addPost","Accept","createPost","Main","path","component","render","App","initialState","isLoaded","reducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.486a2f3a.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Nav.css';\n\nconst Nav = () => (\n  <nav className=\"nav\">\n    <ul className=\"nav__list\">\n      <li>\n        <NavLink\n          className=\"nav__item\"\n          activeClassName=\"nav__item--active\"\n          to=\"/\"\n          exact\n        >\n          Posts list\n        </NavLink>\n      </li>\n      <li>\n        <NavLink\n          className=\"nav__item\"\n          activeClassName=\"nav__item--active\"\n          to=\"/new-post\"\n          exact\n        >\n          New post\n        </NavLink>\n      </li>\n    </ul>\n  </nav>\n);\n\nexport default Nav;\n","export const POSTS_RECEIVED = 'POSTS_RECEIVED';\nexport const POST_RECEIVED = 'POST_RECEIVED';\nexport const NEW_POST_RECEIVED = 'NEW_POST_RECEIVED';\nexport const NEW_COMMENT_RECEIVED = 'NEW_COMMENT_RECEIVED';\nexport const POST_DELETED = 'POST_DELETED';\nexport const POST_UPDATED = 'POST_UPDATED';\nexport const POST_CLEARED = 'POST_CLEARED';\n\nconst BASE_URL = 'https://simple-blog-api.crew.red';\n\nexport const getPosts = () => async(dispatch) => {\n  await fetch(`${BASE_URL}/posts`)\n    .then(res => res.json())\n    .then(posts => (\n      dispatch(receivePosts(posts))\n    ));\n};\n\nexport const receivePosts = posts => ({\n  type: POSTS_RECEIVED,\n  posts,\n});\n\nexport const getPost = postId => async(dispatch) => {\n  await fetch(`${BASE_URL}/posts/${postId}?_embed=comments`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then(res => res.json())\n    .then(post => (\n      dispatch(receivePost(post))\n    ));\n};\n\nexport const receivePost = post => ({\n  type: POST_RECEIVED,\n  post,\n});\n\nexport const createPost = post => async(dispatch) => {\n  await fetch(`${BASE_URL}/posts`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Accept: 'application/json',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json())\n    .then(postData => (\n      dispatch(receiveNewPost(postData))\n    ));\n\n  await fetch(`${BASE_URL}/posts`)\n    .then(res => res.json())\n    .then(posts => (\n      dispatch(receivePosts(posts))\n    ));\n};\n\nexport const receiveNewPost = post => ({\n  type: NEW_POST_RECEIVED,\n  post,\n});\n\nexport const deletePost = postId => async(dispatch) => {\n  await fetch(`${BASE_URL}/posts/${postId}`, {\n    method: 'DELETE',\n    body: 'form-data',\n  })\n    .then(() => (\n      dispatch({ type: POST_DELETED })\n    ));\n\n  await fetch(`${BASE_URL}/posts`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then(res => res.json())\n    .then(posts => (\n      dispatch(receivePosts(posts))\n    ));\n};\n\nexport const createComment = comment => async(dispatch) => {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(comment),\n  })\n    .then(response => response.json())\n    .then(() => (\n      dispatch(receiveNewComment())\n    ));\n\n  await fetch(`${BASE_URL}/posts/${comment.postId}?_embed=comments`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then(res => res.json())\n    .then(post => (\n      dispatch(receivePost(post))\n    ));\n};\n\nexport const receiveNewComment = () => ({\n  type: NEW_COMMENT_RECEIVED,\n});\n\nexport const editPost = post => async(dispatch) => {\n  await fetch(`${BASE_URL}/posts/${post.id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(post),\n  })\n    .then(response => response.json())\n    .then(() => (\n      dispatch(updatePost())\n    ));\n\n  await fetch(`${BASE_URL}/posts`)\n    .then(res => res.json())\n    .then(posts => (\n      dispatch(receivePosts(posts))\n    ));\n};\n\nexport const updatePost = () => ({\n  type: POST_UPDATED,\n});\n\nexport const clearPost = () => ({\n  type: POST_CLEARED,\n});\n","import React from 'react';\nimport './Loader.css';\n\nconst Loader = () => (\n  <div className=\"load\">\n    <div className=\"load__line load__line-first\" />\n    <div className=\"load__line load__line-second\" />\n    <div className=\"load__line load__line-third\" />\n  </div>\n);\n\nexport default Loader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createComment } from '../../redux/actions';\nimport './CommentList.css';\n\nclass CommentList extends React.Component {\n  state = {\n    commentMap: {\n      postId: '',\n      body: '',\n      id: '',\n    },\n  };\n\n  handleFieldChange = (event) => {\n    const { name, value } = event.target;\n    const { postId } = this.props;\n\n    this.setState(prevState => ({\n      commentMap: {\n        ...prevState.commentMap,\n        [name]: value,\n        postId,\n      },\n    }));\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { commentMap } = this.state;\n    const { postComment } = this.props;\n\n    if (commentMap.body) {\n      postComment(commentMap);\n\n      this.setState(prevState => ({\n        commentMap: {\n          ...prevState.commentMap,\n          body: '',\n          id: '',\n        },\n      }));\n    }\n  };\n\n  render() {\n    const { comments } = this.props;\n    const { body } = this.state.commentMap;\n\n    return (\n      <>\n        <form\n          className=\"post__form\"\n          onSubmit={this.handleFormSubmit}\n        >\n          <input\n            value={body}\n            name=\"body\"\n            className=\"post__input\"\n            placeholder=\"Write a comment...\"\n            onChange={this.handleFieldChange}\n          />\n        </form>\n        {\n          !comments || comments.length === 0\n            ? null\n            : (\n              <ul className=\"post__comments\">\n                {comments.map(comment => (\n                  <li\n                    className=\"post__comment\"\n                    key={comment.id}\n                  >\n                    {comment.body}\n                  </li>\n\n                ))}\n              </ul>\n            )\n        }\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  postComment: comment => dispatch(createComment(comment)),\n});\n\nCommentList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.object).isRequired,\n  postId: PropTypes.number.isRequired,\n  postComment: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(CommentList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPost, clearPost } from '../../redux/actions';\nimport Loader from '../Loader/Loader';\nimport './PostPage.css';\nimport CommentList from '../CommentList/CommentList';\n\nclass PostPage extends React.Component {\n  async componentDidMount() {\n    this.props.payLoad(this.props.match.params.postId);\n  }\n\n  componentWillUnmount() {\n    this.props.clearPostData();\n  }\n\n  render() {\n    const { postData } = this.props;\n\n    return (\n      <>\n        {postData.length === 0\n          ? <Loader />\n          : (\n            <div className=\"post-wrap\">\n              <div className=\"post\">\n                <div className=\"post__date\">{postData.date}</div>\n                <div className=\"post__title\">{postData.title}</div>\n                <div className=\"post__body\">{postData.body}</div>\n                <CommentList\n                  comments={postData.comments}\n                  postId={postData.id}\n                />\n              </div>\n            </div>\n          )\n        }\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  postData: state.post,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  payLoad: postId => dispatch(getPost(postId)),\n  clearPostData: () => dispatch(clearPost()),\n});\n\nPostPage.propTypes = {\n  postData: PropTypes.shape({\n    id: PropTypes.number,\n    date: PropTypes.string,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    comments: PropTypes.arrayOf(PropTypes.object),\n    length: PropTypes.number,\n  }).isRequired,\n  payLoad: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      postId: PropTypes.string,\n    }),\n  }).isRequired,\n  clearPostData: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { editPost } from '../../redux/actions';\nimport './EditPost.css';\n\nclass EditPost extends React.Component {\n  state = {\n    postMap: {\n      title: this.props.postTitle || '',\n      body: this.props.postBody,\n      id: this.props.postId,\n    },\n  };\n\n  handleFieldChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      postMap: {\n        ...prevState.postMap,\n        [name]: value,\n      },\n    }));\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { postMap } = this.state;\n    const { onEdit, updatePost } = this.props;\n\n    onEdit();\n    updatePost(postMap);\n  }\n\n  render() {\n    const { title, body } = this.state.postMap;\n\n    return (\n      <form className=\"form-update\">\n        <input\n          className=\"form__input-update\"\n          id=\"new-post-title\"\n          value={title}\n          placeholder=\"Write a title\"\n          name=\"title\"\n          onChange={this.handleFieldChange}\n        />\n        <textarea\n          value={body}\n          name=\"body\"\n          placeholder=\"Write a body\"\n          spellCheck=\"true\"\n          onChange={this.handleFieldChange}\n          className=\"form__textarea\"\n        >\n          {body}\n        </textarea>\n        <button\n          className={\n            title && body\n              ? 'form__btn post__btn-update'\n              : 'form__btn post__btn-update form__btn--disabled'\n          }\n          type=\"submit\"\n          disabled={!(title && body)}\n          onClick={this.handleFormSubmit}\n        >\n          Update post\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updatePost: post => dispatch(editPost(post)),\n});\n\nEditPost.propTypes = {\n  postTitle: PropTypes.string.isRequired,\n  postBody: PropTypes.string.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  updatePost: PropTypes.func.isRequired,\n  postId: PropTypes.number,\n};\n\nEditPost.defaultProps = {\n  postId: '',\n};\n\nexport default connect(null, mapDispatchToProps)(EditPost);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { deletePost } from '../../redux/actions';\nimport './Post.css';\nimport EditPost from '../EditPost/EditPost';\n\nclass Post extends React.Component {\n  state = {\n    isEditing: false,\n  };\n\n  onEdit = () => {\n    this.setState(prevState => ({\n      isEditing: !prevState.isEditing,\n    }));\n  };\n\n  render() {\n    const { post, deleteItem } = this.props;\n    const { isEditing } = this.state;\n\n    return (\n      <div className=\"post\">\n        <div className=\"post__date\">{post.date}</div>\n        <div\n          className=\"post__title\"\n        >\n          {post.title}\n        </div>\n        <button\n          type=\"button\"\n          className=\"post__btn-delete\"\n          title=\"delete\"\n          onClick={() => deleteItem(post.id)}\n        >\n          X\n        </button>\n\n        <div className=\"post__body\">{post.body}</div>\n        <button\n          type=\"button\"\n          className=\"form__btn post__btn-update\"\n          onClick={this.onEdit}\n        >\n          {isEditing ? 'close edit' : 'edit post'}\n        </button>\n        {isEditing\n        && (\n          <EditPost\n            postId={post.id}\n            onEdit={this.onEdit}\n            postTitle={post.title}\n            postBody={post.body}\n          />\n        )}\n        <NavLink\n          className=\"post__link\"\n          to={`/${post.id}`}\n        >\n          Read the full post »\n        </NavLink>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  deleteItem: postId => dispatch(deletePost(postId)),\n\n});\n\nPost.propTypes = {\n  post: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Post from '../Post/Post';\nimport './PostList.css';\nimport { getPosts } from '../../redux/actions';\n\nclass PostsList extends React.Component {\n  async componentDidMount() {\n    this.props.payLoad();\n  }\n\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <div className=\"posts-wrap\">\n        <div className=\"posts\">\n          {posts.map(post => (\n            <Post post={post} key={post.id || Math.random()} />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  posts: state.posts,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  payLoad: () => dispatch(getPosts()),\n});\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.object).isRequired,\n  payLoad: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsList);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { createPost } from '../../redux/actions';\nimport './NewPost.css';\n\nclass NewPost extends React.Component {\n  state = {\n    postMap: {\n      title: '',\n      body: '',\n      id: 0,\n      date: (new Date()).toISOString().slice(0, 10),\n    },\n  };\n\n  handleFieldChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(prevState => ({\n      postMap: {\n        ...prevState.postMap,\n        [name]: value,\n        id: this.props.numberOfPosts + 1,\n      },\n    }));\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const { postMap } = this.state;\n    const { addPost } = this.props;\n\n    addPost(postMap);\n\n    this.setState(prevState => ({\n      postMap: {\n        ...prevState.postMap,\n        title: '',\n        body: '',\n        id: this.props.numberOfPosts + 1,\n      },\n    }));\n  }\n\n  render() {\n    const { title, body } = this.state.postMap;\n\n    return (\n      <div className=\"form\">\n        <fieldset className=\"form__fieldset\">\n          <div className=\"form__title\">Add a new post</div>\n          <form className=\"form__wrap\">\n            <input\n              className=\"form__input-update\"\n              id=\"new-post-title\"\n              value={title}\n              placeholder=\"Write a title\"\n              name=\"title\"\n              onChange={this.handleFieldChange}\n            />\n            <textarea\n              value={body}\n              placeholder=\"Write a body\"\n              name=\"body\"\n              spellCheck=\"true\"\n              onChange={this.handleFieldChange}\n              className=\"form__textarea\"\n            >\n              {body}\n            </textarea>\n            <button\n              className={\n                (title && body)\n                  ? 'form__btn'\n                  : 'form__btn form__btn--disabled'\n              }\n              type=\"submit\"\n              onClick={this.handleFormSubmit}\n              disabled={!(title && body)}\n            >\n              <NavLink\n                to=\"/\"\n                className=\"form__btn-link\"\n              >\n                Add\n              </NavLink>\n            </button>\n          </form>\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  numberOfPosts: state.posts.length,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addPost: post => dispatch(createPost(post)),\n});\n\nNewPost.propTypes = {\n  numberOfPosts: PropTypes.number.isRequired,\n  addPost: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPost);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PostPage from '../PostPage/PostPage';\nimport PostsList from '../PostsList/PostsList';\nimport NewPost from '../NewPost/NewPost';\n\nconst Main = () => (\n  <Switch>\n    <Route path=\"/\" exact component={PostsList} />\n    <Route path=\"/new-post\" exact component={NewPost} />\n    <Route\n      path=\"/:postId\"\n      exact\n      render={({ match }) => <PostPage match={match} />}\n    />\n  </Switch>\n);\n\nexport default Main;\n","import React from 'react';\nimport Nav from './components/Nav/Nav';\nimport Main from './components/Main/Main';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  POSTS_RECEIVED,\n  POST_RECEIVED,\n  NEW_POST_RECEIVED,\n  NEW_COMMENT_RECEIVED,\n  POST_DELETED,\n  POST_UPDATED,\n  POST_CLEARED,\n} from './actions';\n\nexport const initialState = {\n  posts: [],\n  post: [],\n  isLoaded: false,\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case POSTS_RECEIVED:\n      return {\n        ...state,\n        posts: action.posts,\n        isLoaded: true,\n      };\n\n    case POST_RECEIVED:\n      return {\n        ...state,\n        post: action.post,\n      };\n\n    case NEW_POST_RECEIVED:\n      return {\n        ...state,\n      };\n\n    case NEW_COMMENT_RECEIVED:\n      return {\n        ...state,\n      };\n\n    case POST_DELETED:\n      return {\n        ...state,\n      };\n\n    case POST_UPDATED:\n      return {\n        ...state,\n      };\n\n    case POST_CLEARED:\n      return {\n        ...state,\n        post: [],\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport reducer from './redux/reducer';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}